- 데이터 모델링 => 현실 세계를 단순화하여 표현하는 기법
모델링이 갖춰야 할 조건
1. 현실세계를 반영해야 한다.
2. 단순화하여 표현해야 한다.
3. 관리하고자 하는 데이터를 모델로 설계한다.

* 데이터 모델링의 특징
1. 추상화(아이디어나 개념을 간략하게 표현하는 과정)
    - 현실 세계를 일정한 형식으로 표현, 핵심적인 부분만을 뽑아내야 한다.
ex) 병원에서 다양한 유형의 의료진(의사, 간호사, 약사 등)과 여러 종류의 환자가 있다.
     의료진은 환자에게 다양한 처치를 하며, 각 처치마다 복잡한 절차와 기록이 있다.
2. 단순화
    - 단순화는 복잡한 현실세계의 요소들을 간결하게 표현하여 핵심적인 부분만을 모델에 포함하는 과정
ex) 회사에서는 다양한 유형의 고객(개인, 기업, 기관)이 있고, 각 고객마다 다른 요구와 계약 조건이 있다.
3. 명확화
    - 명확화는 시스템의 구조와 동작을 명확하고 일관되게 표현하여 이해를 돕고, 구현과 유지보수를 용이하게 하는 과정
ex) 학생들이 강의를 수강하고, 각 강의는 여러 과제를 포함하고 있다.
     강의에는 강사와 강의 일정이 있으며 학생은 강의에 대한 평가를 남길 수 있다.

* 모델링의 세 가지 단계
1. 개념적 데이터 모델링(Conceptual Data Modeling)
   : 어떤 데이터를 저장할지, 그 데이터들끼리 어떤 관계가 있는지를 생각하는 단계
2. 논리적 모델링(Logical Data Modeling)
   : 아이디어를 구체적으로 정리하는 단계
     재사용성이 가장 높은 모델링으로 데이터 베이스 모델에 대한 key, 속성, 관계 등을 모두 표현하는 단계
3. 물리적 모델링(Physical Data Modeling)
   : 실제 데이터 베이스로 구현할 수 있도록 성능이나 가용성 등의 물리적인 성격을 고려하여 모델을 표현하는 단계

문제1) 모델링의 첫 단계는 <개념적 데이터 모델링>으로 업무 프로세스를 포괄적으로 모델링 하는 단계이다.
        모델링의 두 번째 단계는 <논리적 데이터 모델링>으로 모델에 대한 key, 속성, 관계 등을 표현. 재사용성이 높다.
        모델링의 세 번째 단계는 <물리적 데이터 모델링>으로 데이터 베이스에서 실제 구현하기 위해 성능이나 가용성 등을 고려하는 단계이다.

* 데이터 독립성
schema => 형태, 모양, 개요
데이터 베이스에 저장되는 데이터 구조와 제약 조건을 정의한 것 = 설계도

3단계 스키마 구조
   : 데이터 베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터 베이스를 관점에 따라 세 단계로 나눈 것 / 미국 표준 기관인 ANSI / SPARC에서 제안

1. 외부 스키마
   = 사용자 또는 어플리케이션 관점에서 데이터를 정의한다.
      외부 스키마는 데이터 베이스의 특정 부분을 정의하며, 각 사용자 또는 어플리케이션이 접근할 수 있는 데이터와 관련된 "뷰"를 제공한다.
2. 개념 스키마
   = 전체 데이터 베이스의 논리적 구조를 정의한다.
      모든 데이터 베이스 개체(테이블, 속성, 관계)와 이들 간의 관계성을 명확히 설명한다.
      데이터 베이스에 저장되는 데이터들을 표현하는 데이터들 간의 관계를 나타낸다.
3. 내부 스키마
   = 데이터 베이스의 물리적 저장 구조를 정의한다.
      데이터가 어떻게 저장되고, 접근되고, 최적화될지 결정하는 것

논리적 독립성 : 개념 스키마가 변경되어도 외부 스키마는 영향받지 않는다.
물리적 독립성 : 내부 스키마가 변경되어도, 외부 / 개념 스키마는 영향받지 않는다.

* ERD(Entity Relationship Diagram)
   : Entity 개체와 relationship 관계를 중점적으로 표시하는 데이터 베이스 구조를 한 눈에 알아보기 위해 그려 놓은 다이어그램이다.
     개체 관계도라고 불리며, 요구 분석사항에서 얻은 엔티티와 속성들의 관계를 그림으로 표현한 것.

Entity : 정의 가능한 사물 또는 개념을 의미한다.
          사람도 될 수 있으며 프로필이나 도서 정보와 같은 무형의 정보도 데이터화 가능하다.

문제2) 다음 중 전자 상거래 사이트에서 작성이 가능한 엔티티로 적합하지 않은 것은?
     1. 탈퇴가 예상되는 회원 2. 주문 이력 3. 배송 진행 상황 4. 주문 금액에 따른 회원등급
          (1) => 엔티티 기준 중 모호한 기준은 성립될 수 없기 때문.

Entity의 특징
     1. 업무에 쓰이는 정보여야 함.
     2. 유니티함을 보장할 수 있는 식별자가 있어야 함.
     3. 2개 이상의 인스턴스를 가지고 있어야 함.
     4. 반드시 속성을 가지고 있어야 한다.
     5. 다른 엔티티와 1개 이상의 관계를 가지고 있어야 함.

Entity의 속성
   : 엔티티에는 개체가 갖고 있는 속성(엔티티의 특징을 나타내는 최소한의 데이터 단위)을 포함한다.
ex) 학생 Entity => 학번 / 이름 / 주소 / 전공 .....

Entity의 도메인(이는 데이터 타입을 의미함)
   : 도메인은 속성의 값, 타입, 제약 사향 등에 대한 값의 범위를 표현한다.
ex) 학번 => int(숫자) / 이름 => varchar(10) / 주소 => char(20) / 전공 => char(20)

Entity의 분류
   : 엔티티 분류 구분을 잘 해주어야 데이터 베이스 설계에 있어 각 데이터 주제에 맞게 모델링을 구축할 수 있다.

1. 유형 vs 무형
유형 엔티티 : 물리적인 형태 존재, 안정적, 지속적 : ex) 상품, 회원
개념 엔티티 : 물리적인 형태가 없음, 개념적 : ex) 학과, 부서
사건 엔티티 : 행위를 함으로써 발생, 빈번함, 통계 자료로 이용 가능 : ex) 주문, 이벤트 응모

2. 발생 시점
기본 엔티티 : 독립적으로 생성됨, 자식을 가질 수 있음 : ex) 상품, 회원
중심 엔티티 : 기본 엔티티로부터 파생, 행위 엔티티 생성 : ex) 주문
행위 엔티티 : 2개 이상의 엔티티로부터 파생

* 엔티티 이름 정할 때 주의할 점
1. 업무에서 쓰이는 정보여야 함.
2. 한글에서는 약어를 사용하지 않고 영문은 대문자로 표기
3. 단수 명사로 표현하고 띄어쓰기는 하지 않음
4. 다른 엔티티의 의미상으로 중복될 수 없음 (주문, 결제 엔티티는 중복될 수 있음)
5. 해당 엔티티가 갖고 있는 데이터가 무엇인지 명확하게 표현

문제3) 엔티티 명으로 가장 적합한 것은? (3)
     1. 집계 2. 월 매출 내역들 3. 회원탈퇴 4. 주문한 회원
1 => 명확성이 떨어짐
2 => 단수로 지어야 함
4 => 띄어쓰기를 하지 않아야 함

속성 : 사람이나 사물을 정의할 때 보통 여러가지 특징들이 수식어로 붙게 되는 것을 볼 수가 있다.
         예를 들어, 아티스트에게는 이름, 생년월일, 소속사, 데뷔 연도 등의 수식어가 붙을 수 있는데
         이렇게 사물이나 개념의 특징을 설명해줄 수 있는 것을 속성이라고 한다.
	=> 더 이상 쪼개지지 않는 레벨이어야 한다.
	     (열 : 속성(column) / 행 : 인스턴스(값))

문제4) 다음 중 속성이 될 수 없는 것은? (2)
     1. 회원 엔티티 = 주소
     2. 상품 엔티티 = 가격변경 이력
     3. 강사 엔티티 = 강사번호
     4. 수강 엔티티 = 수강일자 신청

한 속성에 속성값이 여러 개일 경우, 별도의 엔티티로 분리해야 함.
엔티티 > 인스턴스 > 속성 > 속성 값
1. 한 개의 엔티티는 두 개 이상의 인스턴스를 갖는다.
2. 한 개의 인스턴스는 두 개 이상의 속성을 갖는다.
3. 한 개의 속성은 하나의 속성값을 갖는다.

속성의 분류
   : 특성에 따른 분류

ex) 엔티티는 의사(doctor)

기본 속성 : 업무 프로세스 분석을 통해 바로 정의가 가능한 것
ex) 이름(의사의 이름)
     생년월일
     소속병원

설계 속성 : 설계가 필요하다고 판단되어 도출되는 속성
ex) 의사 ID : int(integer)
     이름 : varchar
     생년월일 : date
     소속병원 : varchar

파생 속성 : 다른 속성의 속성값을 계산하거나 특정한 규칙으로 변형하여 생성한 속성
ex) 나이 : 생년월일로부터 현재 날짜와의 차이로 계산된 것

문제5) 속성의 특성에 따른 분류로 옳지 않은 것은? (2)
     1. 기본 속성 - 상품 이름
     2. 설계 속성 - 주민등록 번호
     3. 파생 속성 - 이벤트 응모건수
     4. 기본 속성 - 상품 가격

구성 방식에 따른 분류
PK(Primary Key)
   : 주 식별자, 엔티티의 인스턴스들을 식별할 수 있는 속성(자신의 특성)
데이터 베이스 테이블의 Primary key를 표현
중복이 없고, NULL 값이 없는 유일한 값에 지정하는 식별자(NULL : 값이 없다)

FK(Foreign Key)
   : 외래 식별자, 역시 key의 일종이라 ERD 엔티티에도 열쇠 아이콘으로 표시한다.
                      다른 엔티티에서 온 식별자, 다른 엔티티와의 연결고리

ex) 부모 : 학생 Entity => 학번 INT(PK)
     자식 : 학생별 취미 Entity => 학번 INT(FK), 이름 CHAR(FK)

관계 (Relationship)

엔티티와 엔티티의 관계를 의미하며, 어떠한 연관성이 있는지 타입을 분류하여 존재 관계와 행위 관계로 나눌 수 있다.
존재 관계
   : 엄마와 아기처럼 존재 자체로 연관성이 있는 관계를 의미한다.
     ex) 직원과 부서, 학생과 학과
행위 관계
   : 특정한 행위를 함으로써 연관성이 생기는 관계
     ex) 회원과 주문, 학생과 출석

실선 : 식별관계
부모 테이블[A 테이블]의 PK가 외래키로써, 자식 테이블[B 테이블]의 PK에 포함되는 경우
부모, 자식 관계(부모가 있어야 자식이 생기는 경우)

점선 : 비식별관계
부모 테이블[A 테이블]의 PK가 외래키로써, 자식 테이블[B 테이블]의 PK가 아닌 일반 속성
부모 자식이 아닌 모든 경우(부모가 없어도 자식이 생기는 경우)

------------------
SQL 자격 검정 실전문제1
문제1) (2) => 단순화, 추상화, 정확화
문제2) (3) => 별도의 표기법을 이용하지 x, 약속된 표기법이 있다.
문제3) (3) => 데이터 모델링의 유의점 : 중복, 비유연성, 비일관성